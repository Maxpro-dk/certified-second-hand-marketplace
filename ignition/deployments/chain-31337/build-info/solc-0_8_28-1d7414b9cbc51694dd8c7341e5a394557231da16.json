{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-1d7414b9cbc51694dd8c7341e5a394557231da16",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CertifiedSecondHandMarketplace.sol": "project/contracts/CertifiedSecondHandMarketplace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/CertifiedSecondHandMarketplace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract CertifiedSecondHandMarketplace {\n    uint16 private _itemIdCounter;\n    address public owner;\n\n    struct Transaction {\n        address owner;\n        uint32 datetime;\n        uint256 salePrice;\n    }\n    \n    struct Item {\n        uint16 id;\n        string name;\n        string numSerie;\n        string description;\n        string image;\n        address owner;\n        bool isCertified;\n        address certifiedBy;\n        bool forSale;\n        uint256 price;\n        Transaction[] transactions;\n    }\n    \n    mapping(uint16 => Item) public items;\n    mapping(address => uint16[]) public userItems;\n    mapping(address => bool) public certifiers;\n    \n    event ItemRegistered(uint16 id, address owner);\n    event ItemCertified(uint16 id, address certifier);\n    event ItemSold(uint16 id, address buyer, uint256 price);\n    event ItemTransferred(uint16 id, address from, address to);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n    \n    modifier onlyItemOwner(uint16 _itemId) {\n        require(items[_itemId].owner == msg.sender, \"Not owner\");\n        _;\n    }\n    \n    modifier onlyCertifier() {\n        require(certifiers[msg.sender], \"Not certifier\");\n        _;\n    }\n    \n    modifier itemExists(uint16 _itemId) {\n        require(items[_itemId].owner != address(0), \"Item doesn't exist\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n        certifiers[msg.sender] = true;\n    }\n    \n    // Enregistrer un bien\n    function registerItem(\n        string memory _name,\n        string memory _numSerie,\n        string memory _description,\n        string memory _image\n    ) external {\n        _itemIdCounter++;\n        \n        // Create the item first\n        Item storage newItem = items[_itemIdCounter];\n        newItem.id = _itemIdCounter;\n        newItem.name = _name;\n        newItem.numSerie = _numSerie;\n        newItem.description = _description;\n        newItem.image = _image;\n        newItem.owner = msg.sender;\n        newItem.isCertified = false;\n        newItem.certifiedBy = address(0);\n        newItem.forSale = false;\n        newItem.price = 0;\n        \n        // Ajouter la transaction initiale\n        newItem.transactions.push(Transaction({\n            owner: msg.sender,\n            datetime: uint32(block.timestamp),\n            salePrice: 0\n        }));\n        \n        userItems[msg.sender].push(_itemIdCounter);\n        emit ItemRegistered(_itemIdCounter, msg.sender);\n    }\n    \n    // Récupérer tous les biens\n    function getAllItems() external view returns (\n        uint16[] memory ids,\n        string[] memory names,\n        string[] memory numSeries,\n        string[] memory images,\n        string[] memory descriptions,\n        address[] memory owners,\n        bool[] memory isCertifieds,\n        bool[] memory forSales,\n        uint256[] memory prices,\n        uint256[] memory transactionCounts\n    ) {\n        uint16 itemCount = _itemIdCounter;\n        \n        ids = new uint16[](itemCount);\n        names = new string[](itemCount);\n        numSeries = new string[](itemCount);\n        descriptions = new string[](itemCount);\n        images = new string[](itemCount);\n        owners = new address[](itemCount);\n        isCertifieds = new bool[](itemCount);\n        forSales = new bool[](itemCount);\n        prices = new uint256[](itemCount);\n        transactionCounts = new uint256[](itemCount);\n        \n        for (uint16 i = 1; i <= itemCount; i++) {\n            if (items[i].owner != address(0)) {\n                ids[i-1] = items[i].id;\n                names[i-1] = items[i].name;\n                numSeries[i-1] = items[i].numSerie;\n                images[i-1] = items[i].image;\n                descriptions[i-1] = items[i].description;\n                owners[i-1] = items[i].owner;\n                isCertifieds[i-1] = items[i].isCertified;\n                forSales[i-1] = items[i].forSale;\n                prices[i-1] = items[i].price;\n                transactionCounts[i-1] = items[i].transactions.length;\n            }\n        }\n        \n        return (ids, names, numSeries,images, descriptions, owners, isCertifieds, forSales, prices, transactionCounts);\n    }\n    \n    // Lister tous les biens d'un utilisateur\n    function getUserItems() external view returns (uint16[] memory) {\n        return userItems[msg.sender];\n    }\n    \n    // Ajouter un certificateur\n    function addCertifier(address _certifier) external onlyOwner {\n        certifiers[_certifier] = true;\n    }\n    \n    // Certifier un article\n    function certifyItem(uint16 _itemId) external onlyCertifier itemExists(_itemId) {\n        items[_itemId].isCertified = true;\n        items[_itemId].certifiedBy = msg.sender;\n        emit ItemCertified(_itemId, msg.sender);\n    }\n    \n    // Vérifier si un article est certifié\n    function isItemCertified(uint16 _itemId) external view itemExists(_itemId) returns (bool) {\n        return items[_itemId].isCertified;\n    }\n    \n    // Mettre en vente\n    function listForSale(uint16 _itemId, uint256 _price) external onlyItemOwner(_itemId) {\n        items[_itemId].forSale = true;\n        items[_itemId].price = _price;\n    }\n    \n    // Acheter un article\n    function buyItem(uint16 _itemId) external payable itemExists(_itemId) {\n        Item storage item = items[_itemId];\n        require(item.forSale, \"Not for sale\");\n        require(msg.value >= item.price, \"Insufficient funds\");\n        \n        address seller = item.owner;\n        \n        // Transfert de propriété\n        item.owner = msg.sender;\n        item.forSale = false;\n        \n        // Ajouter la transaction\n        item.transactions.push(Transaction({\n            owner: msg.sender,\n            datetime: uint32(block.timestamp),\n            salePrice: item.price\n        }));\n        \n        // Paiement\n        payable(seller).transfer(item.price);\n        \n        // Mise à jour des listes\n        _removeItemFromUser(seller, _itemId);\n        userItems[msg.sender].push(_itemId);\n        \n        emit ItemSold(_itemId, msg.sender, item.price);\n    }\n    \n    // Transfert gratuit\n    function transferItem(uint16 _itemId, address _to) external onlyItemOwner(_itemId) {\n        items[_itemId].owner = _to;\n        items[_itemId].forSale = false;\n        \n        // Ajouter la transaction\n        items[_itemId].transactions.push(Transaction({\n            owner: _to,\n            datetime: uint32(block.timestamp),\n            salePrice: 0\n        }));\n        \n        _removeItemFromUser(msg.sender, _itemId);\n        userItems[_to].push(_itemId);\n        \n        emit ItemTransferred(_itemId, msg.sender, _to);\n    }\n    \n    // Fonction utilitaire pour retirer un item d'un utilisateur\n    function _removeItemFromUser(address _user, uint16 _itemId) private {\n        uint16[] storage userItemsList = userItems[_user];\n        for (uint256 i = 0; i < userItemsList.length; i++) {\n            if (userItemsList[i] == _itemId) {\n                userItemsList[i] = userItemsList[userItemsList.length - 1];\n                userItemsList.pop();\n                break;\n            }\n        }\n    }\n    \n    // Obtenir les détails d'un item\n    function getItem(uint16 _itemId) external view itemExists(_itemId) returns (\n        uint16 id,\n        string memory name,\n        string memory numSerie,\n        string memory description,\n        string memory image,\n        address itemOwner, // Changed from 'owner' to 'itemOwner' to avoid shadowing\n        bool isCertified,\n        bool forSale,\n        uint256 price,\n        uint256 transactionCount\n    ) {\n        Item storage item = items[_itemId];\n        return (\n            item.id,\n            item.name,\n            item.numSerie,\n            item.description,\n            item.image,\n            item.owner,\n            item.isCertified,\n            item.forSale,\n            item.price,\n            item.transactions.length\n        );\n    }\n    \n    // Obtenir l'historique des transactions d'un item\n    function getItemTransactions(uint16 _itemId) external view itemExists(_itemId) returns (\n        address[] memory owners,\n        uint32[] memory datetimes,\n        uint256[] memory salePrices\n    ) {\n        Item storage item = items[_itemId];\n        uint256 length = item.transactions.length;\n        \n        owners = new address[](length);\n        datetimes = new uint32[](length);\n        salePrices = new uint256[](length);\n        \n        for (uint256 i = 0; i < length; i++) {\n            owners[i] = item.transactions[i].owner;\n            datetimes[i] = item.transactions[i].datetime;\n            salePrices[i] = item.transactions[i].salePrice;\n        }\n        \n        return (owners, datetimes, salePrices);\n    }\n}"
      }
    }
  }
}