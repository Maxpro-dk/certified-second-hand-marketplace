{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-a49cf12af485a6682b4e60728e161ed5786c4365",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CertifiedSecondHandMarketplace.sol": "project/contracts/CertifiedSecondHandMarketplace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/CertifiedSecondHandMarketplace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title CertifiedSecondHandMarketplace\n * @dev Contrat pour une marketplace de biens d'occasion certifiés avec traçabilité blockchain\n * @notice Permet l'enregistrement, la certification, la vente et le transfert de biens d'occasion\n */\ncontract CertifiedSecondHandMarketplace {\n    // Compteur pour générer des ID uniques pour les items\n    uint256 private _tokenIdCounter;\n    \n    // Propriétaire du contrat (déployeur)\n    address public contractOwner;\n    \n    /**\n     * @dev Structure représentant un bien d'occasion\n     * @param tokenId Identifiant unique du bien\n     * @param name Nom du produit\n     * @param value Valeur estimée du bien\n     * @param description Description détaillée du bien\n     * @param serialNumber Numéro de série unique\n     * @param owner Propriétaire actuel du bien\n     * @param imageURI Lien vers l'image du bien (IPFS ou autre)\n     * @param isForSale Indique si le bien est en vente\n     * @param salePrice Prix de vente si le bien est en vente\n     * @param isCertified Indique si le bien est certifié\n     * @param certifiedBy Adresse de l'entité qui a certifié le bien\n     */\n    struct Item {\n        uint256 tokenId;\n        string name;\n        uint256 value;\n        string description;\n        string serialNumber;\n        address owner;\n        string imageURI;\n        bool isForSale;\n        uint256 salePrice;\n        bool isCertified;\n        address certifiedBy;\n    }\n    \n    /**\n     * @dev Structure représentant une transaction\n     * @param previousOwner Ancien propriétaire\n     * @param newOwner Nouveau propriétaire\n     * @param transferDate Date de la transaction (timestamp)\n     * @param transactionType Type de transaction (\"Registration\", \"Sale\", \"Transfer\")\n     * @param price Prix de la transaction (0 pour les transferts gratuits)\n     */\n    struct Transaction {\n        address previousOwner;\n        address newOwner;\n        uint256 transferDate;\n        string transactionType;\n        uint256 price;\n    }\n    \n    // Mapping des items par leur ID\n    mapping(uint256 => Item) public items;\n    \n    // Mapping des numéros de série vers les IDs de tokens\n    mapping(string => uint256) public serialNumberToTokenId;\n    \n    // Historique des transactions par item\n    mapping(uint256 => Transaction[]) public itemTransactions;\n    \n    // Utilisateurs enregistrés sur la plateforme\n    mapping(address => bool) public registeredUsers;\n    \n    // Items détenus par chaque utilisateur\n    mapping(address => uint256[]) public userItems;\n    \n    // Entités autorisées à certifier les biens\n    mapping(address => bool) public certifiers;\n    \n    // Propriétaires des tokens\n    mapping(uint256 => address) public tokenOwner;\n    \n    // Frais de plateforme en basis points (100 = 1%)\n    uint256 public platformFee = 250; // 2.5%\n    \n    // Portefeuille pour recevoir les frais de plateforme\n    address public platformWallet;\n    \n    // Événements\n    event UserRegistered(address user);\n    event ItemRegistered(uint256 tokenId, string serialNumber, address owner);\n    event ItemTransferred(uint256 tokenId, address from, address to);\n    event ItemForSale(uint256 tokenId, uint256 price);\n    event ItemSold(uint256 tokenId, address buyer, uint256 price);\n    event ItemCertified(uint256 tokenId, address certifier);\n\n    // Modificateurs\n\n    /**\n     * @dev Vérifie que l'utilisateur est enregistré\n     */\n    modifier onlyRegisteredUser() {\n        require(registeredUsers[msg.sender], \"User not registered\");\n        _;\n    }\n    \n    /**\n     * @dev Vérifie que l'utilisateur est propriétaire de l'item\n     * @param _tokenId ID de l'item à vérifier\n     */\n    modifier onlyItemOwner(uint256 _tokenId) {\n        require(tokenOwner[_tokenId] == msg.sender, \"Not the owner\");\n        _;\n    }\n    \n    /**\n     * @dev Vérifie que l'utilisateur est un certifier autorisé\n     */\n    modifier onlyCertifier() {\n        require(certifiers[msg.sender], \"Not authorized certifier\");\n        _;\n    }\n    \n    /**\n     * @dev Vérifie que l'utilisateur est le propriétaire du contrat\n     */\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not contract owner\");\n        _;\n    }\n    \n    /**\n     * @dev Vérifie que l'item existe\n     * @param _tokenId ID de l'item à vérifier\n     */\n    modifier itemExists(uint256 _tokenId) {\n        require(tokenOwner[_tokenId] != address(0), \"Item does not exist\");\n        _;\n    }\n    \n    /**\n     * @dev Constructeur du contrat\n     */\n    constructor() {\n        contractOwner = msg.sender;\n        platformWallet = msg.sender;\n        // Le déployeur et le portefeuille de frais sont automatiquement certifiers\n        certifiers[msg.sender] = true;\n        certifiers[platformWallet] = true;\n    }\n    \n    /**\n     * @dev Enregistre un nouvel utilisateur sur la plateforme\n     * @notice Les utilisateurs doivent s'enregistrer avant de pouvoir utiliser la plateforme\n     */\n    function registerUser() external {\n        require(!registeredUsers[msg.sender], \"Already registered\");\n        registeredUsers[msg.sender] = true;\n        emit UserRegistered(msg.sender);\n    }\n    \n    /**\n     * @dev Ajoute un nouveau certifier autorisé\n     * @param _certifier Adresse du nouveau certifier\n     * @notice Seul le propriétaire du contrat peut ajouter des certifiers\n     */\n    function addCertifier(address _certifier) external onlyOwner {\n        certifiers[_certifier] = true;\n    }\n    \n    /**\n     * @dev Enregistre un nouveau bien sur la plateforme\n     * @param _name Nom du produit\n     * @param _value Valeur estimée\n     * @param _description Description détaillée\n     * @param _serialNumber Numéro de série unique\n     * @param _imageURI Lien vers l'image du produit\n     * @notice Le numéro de série doit être unique\n     */\n    function registerItem(\n        string memory _name,\n        uint256 _value,\n        string memory _description,\n        string memory _serialNumber,\n        string memory _imageURI\n    ) external onlyRegisteredUser {\n        require(serialNumberToTokenId[_serialNumber] == 0, \"Serial number exists\");\n        \n        // Incrémente le compteur et génère un nouvel ID\n        _tokenIdCounter++;\n        uint256 _tokenId = _tokenIdCounter;\n        \n        // Définit le propriétaire initial\n        tokenOwner[_tokenId] = msg.sender;\n        \n        // Crée le nouvel item\n        items[_tokenId] = Item({\n            tokenId: _tokenId,\n            name: _name,\n            value: _value,\n            description: _description,\n            serialNumber: _serialNumber,\n            owner: msg.sender,\n            imageURI: _imageURI,\n            isForSale: false,\n            salePrice: 0,\n            isCertified: false,\n            certifiedBy: address(0)\n        });\n        \n        // Enregistre le mapping numéro de série → ID\n        serialNumberToTokenId[_serialNumber] = _tokenId;\n        \n        // Ajoute l'item à la liste de l'utilisateur\n        userItems[msg.sender].push(_tokenId);\n        \n        // Enregistre la transaction initiale\n        itemTransactions[_tokenId].push(Transaction({\n            previousOwner: address(0),\n            newOwner: msg.sender,\n            transferDate: block.timestamp,\n            transactionType: \"Registration\",\n            price: 0\n        }));\n        \n        emit ItemRegistered(_tokenId, _serialNumber, msg.sender);\n    }\n    \n    /**\n     * @dev Certifie un bien\n     * @param _tokenId ID du bien à certifier\n     * @notice Seuls les certifiers autorisés peuvent certifier des biens\n     */\n    function certifyItem(uint256 _tokenId) external onlyCertifier itemExists(_tokenId) {\n        Item storage item = items[_tokenId];\n        item.isCertified = true;\n        item.certifiedBy = msg.sender;\n        emit ItemCertified(_tokenId, msg.sender);\n    }\n    \n    /**\n     * @dev Met un bien en vente\n     * @param _tokenId ID du bien à mettre en vente\n     * @param _salePrice Prix de vente\n     * @notice Seul le propriétaire peut mettre son bien en vente\n     */\n    function listItemForSale(uint256 _tokenId, uint256 _salePrice) external onlyItemOwner(_tokenId) {\n        items[_tokenId].isForSale = true;\n        items[_tokenId].salePrice = _salePrice;\n        emit ItemForSale(_tokenId, _salePrice);\n    }\n    \n    /**\n     * @dev Achète un bien en vente\n     * @param _tokenId ID du bien à acheter\n     * @notice Le prix payé doit couvrir le prix de vente\n     */\n    function purchaseItem(uint256 _tokenId) external payable onlyRegisteredUser itemExists(_tokenId) {\n        Item storage item = items[_tokenId];\n        require(item.isForSale, \"Not for sale\");\n        require(msg.value >= item.salePrice, \"Insufficient funds\");\n        require(tokenOwner[_tokenId] != msg.sender, \"Cannot buy own item\");\n        \n        address seller = tokenOwner[_tokenId];\n        uint256 salePrice = item.salePrice;\n        \n        // Calcul des frais de plateforme et du montant pour le vendeur\n        uint256 platformFeeAmount = (salePrice * platformFee) / 10000;\n        uint256 sellerAmount = salePrice - platformFeeAmount;\n        \n        // Transfert de propriété\n        tokenOwner[_tokenId] = msg.sender;\n        \n        // Transfert des fonds\n        payable(seller).transfer(sellerAmount);\n        payable(platformWallet).transfer(platformFeeAmount);\n        \n        // Remboursement de l'excédent\n        if (msg.value > salePrice) {\n            payable(msg.sender).transfer(msg.value - salePrice);\n        }\n        \n        // Mise à jour du statut de vente\n        item.isForSale = false;\n\n\n        \n        // Enregistrement de la transaction\n        itemTransactions[_tokenId].push(Transaction({\n            previousOwner: seller,\n            newOwner: msg.sender,\n            transferDate: block.timestamp,\n            transactionType: \"Sale\",\n            price: salePrice\n        }));\n\n         // Retirer l'item de la liste de l'ancien propriétaire\n        uint256[] storage previousOwnerItems = userItems[seller];\n        for (uint256 i = 0; i < previousOwnerItems.length; i++) {\n            if (previousOwnerItems[i] == _tokenId) {\n                // Déplacer le dernier élément à la place de celui à supprimer\n                previousOwnerItems[i] = previousOwnerItems[previousOwnerItems.length - 1];\n                // Supprimer le dernier élément\n                previousOwnerItems.pop();\n                break;\n            }\n        }\n        \n        // Ajout à la liste des items de l'acheteur\n        userItems[msg.sender].push(_tokenId);\n        \n        emit ItemSold(_tokenId, msg.sender, salePrice);\n        emit ItemTransferred(_tokenId, seller, msg.sender);\n    }\n    \n    /**\n     * @dev Transfert gratuit d'un bien (don)\n     * @param _to Adresse du destinataire\n     * @param _tokenId ID du bien à transférer\n     * @notice Le destinataire doit être un utilisateur enregistré\n     */\n    function transferItem(address _to, uint256 _tokenId) external onlyItemOwner(_tokenId) {\n        require(registeredUsers[_to], \"Recipient not registered\");\n        \n        address previousOwner = tokenOwner[_tokenId];\n        tokenOwner[_tokenId] = _to;\n        \n        // Si l'item était en vente, annulation de la vente\n        if (items[_tokenId].isForSale) {\n            items[_tokenId].isForSale = false;\n        }\n        \n        // Retirer l'item de la liste de l'ancien propriétaire\n        uint256[] storage previousOwnerItems = userItems[previousOwner];\n        for (uint256 i = 0; i < previousOwnerItems.length; i++) {\n            if (previousOwnerItems[i] == _tokenId) {\n                // Déplacer le dernier élément à la place de celui à supprimer\n                previousOwnerItems[i] = previousOwnerItems[previousOwnerItems.length - 1];\n                // Supprimer le dernier élément\n                previousOwnerItems.pop();\n                break;\n            }\n        }\n        \n        // Ajout à la liste du destinataire\n        userItems[_to].push(_tokenId);\n        \n        // Enregistrement de la transaction\n        itemTransactions[_tokenId].push(Transaction({\n            previousOwner: previousOwner,\n            newOwner: _to,\n            transferDate: block.timestamp,\n            transactionType: \"Transfer\",\n            price: 0\n        }));\n        \n        emit ItemTransferred(_tokenId, previousOwner, _to);\n    }\n    \n    /**\n     * @dev Vérifie l'authenticité d'un bien par son numéro de série\n     * @param _serialNumber Numéro de série à vérifier\n     * @return exists Si le bien existe\n     * @return tokenId ID du bien\n     * @return owner Propriétaire actuel\n     * @return isCertified Si le bien est certifié\n     */\n    function verifyItemBySerialNumber(string memory _serialNumber) external view returns (\n        bool exists,\n        uint256 tokenId,\n        address owner,\n        bool isCertified\n    ) {\n        tokenId = serialNumberToTokenId[_serialNumber];\n        if (tokenId == 0 || tokenOwner[tokenId] == address(0)) {\n            return (false, 0, address(0), false);\n        }\n        \n        return (true, tokenId, tokenOwner[tokenId], items[tokenId].isCertified);\n    }\n    \n    /**\n     * @dev Récupère l'historique des transactions d'un bien\n     * @param _tokenId ID du bien\n     * @return Tableau des transactions\n     */\n    function getItemHistory(uint256 _tokenId) external view itemExists(_tokenId) returns (Transaction[] memory) {\n        return itemTransactions[_tokenId];\n    }\n    \n    /**\n     * @dev Récupère les items d'un utilisateur\n     * @param _user Adresse de l'utilisateur\n     * @return Tableau des IDs d'items\n     */\n    function getUserItems(address _user) external view returns (uint256[] memory) {\n        return userItems[_user];\n    }\n    \n    /**\n     * @dev Récupère le nombre total de biens pour un utilisateur\n     * @return nombre Total de biens possédés par l'utilisateur\n     */\n    function getUserItemsCount() external view returns (uint256) {\n        return userItems[msg.sender].length;\n    }\n    \n    /**\n     * @dev Récupère le nombre total de biens enregistrés sur la plateforme\n     * @return nombre Total de biens existants\n     * @notice Inclut tous les biens, qu'ils soient en vente ou non\n     */\n    function getTotalItemsCount() external view returns (uint256) {\n        return _tokenIdCounter;\n    }\n    \n    /**\n     * @dev Récupère le nombre total de biens actifs (non supprimés/détruits)\n     * @return nombre Total de biens actuellement existants\n     * @notice Un bien est considéré comme actif s'il a un propriétaire\n     */\n    function getActiveItemsCount() external view returns (uint256) {\n        uint256 activeCount = 0;\n        for (uint256 i = 1; i <= _tokenIdCounter; i++) {\n            if (tokenOwner[i] != address(0)) {\n                activeCount++;\n            }\n        }\n        return activeCount;\n    }\n    \n    /**\n     * @dev Récupère tous les biens disponibles à la vente\n     * @return Tableau des IDs d'items en vente\n     */\n    function getAvailableItems() external view returns (uint256[] memory) {\n        uint256 availableCount = 0;\n        \n        // Compte les items disponibles\n        for (uint256 i = 1; i <= _tokenIdCounter; i++) {\n            if (tokenOwner[i] != address(0) && items[i].isForSale) {\n                availableCount++;\n            }\n        }\n        \n        uint256[] memory availableItems = new uint256[](availableCount);\n        uint256 currentIndex = 0;\n        \n        // Remplit le tableau avec les items disponibles\n        for (uint256 i = 1; i <= _tokenIdCounter; i++) {\n            if (tokenOwner[i] != address(0) && items[i].isForSale) {\n                availableItems[currentIndex] = i;\n                currentIndex++;\n            }\n        }\n        \n        return availableItems;\n    }\n    \n    /**\n     * @dev Récupère le nombre de biens disponibles à la vente\n     * @return nombre Total de biens actuellement en vente\n     */\n    function getAvailableItemsCount() external view returns (uint256) {\n        uint256 availableCount = 0;\n        for (uint256 i = 1; i <= _tokenIdCounter; i++) {\n            if (tokenOwner[i] != address(0) && items[i].isForSale) {\n                availableCount++;\n            }\n        }\n        return availableCount;\n    }\n    \n    /**\n     * @dev Récupère le nombre de biens certifiés\n     * @return nombre Total de biens certifiés sur la plateforme\n     */\n    function getCertifiedItemsCount() external view returns (uint256) {\n        uint256 certifiedCount = 0;\n        for (uint256 i = 1; i <= _tokenIdCounter; i++) {\n            if (tokenOwner[i] != address(0) && items[i].isCertified) {\n                certifiedCount++;\n            }\n        }\n        return certifiedCount;\n    }\n    \n    /**\n     * @dev Récupère le propriétaire d'un bien\n     * @param _tokenId ID du bien\n     * @return Adresse du propriétaire\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        return tokenOwner[_tokenId];\n    }\n}"
      }
    }
  }
}